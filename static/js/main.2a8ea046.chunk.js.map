{"version":3,"sources":["Drumboxes.js","App.js","serviceWorker.js","index.js"],"names":["Drumboxes","count","useState","speed","setSpeed","sounds","useEffect","interval","setInterval","i","container","document","getElementsByClassName","button","children","style","transform","value","Audio","process","play","clearInterval","drums","createElement","header","innerHTML","classList","add","appendChild","addEventListener","e","target","backgroundColor","className","class","type","min","max","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0JA4FeA,EA1FG,WAChB,IAAIC,EAAQ,EADU,EAEIC,mBAAS,KAFb,mBAEfC,EAFe,KAERC,EAFQ,KAGhBC,EAAS,CAAC,OAAQ,QAAS,OAAQ,QAAS,OAAQ,OAAQ,OAElEC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WACvBP,EAAQ,EAAI,IACdA,EAAQ,GAEV,IAAK,IAAIQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMC,EAAYC,SAASC,uBAAuB,oBAChDH,GAEII,EAASH,EAAUI,SAASb,GAClC,GAAIA,EAAQ,EACSS,EAAUI,SAASb,EAAQ,GACnCc,MAAMC,UAAY,gBAEVN,EAAUI,SAAS,GAC3BC,MAAMC,UAAY,WAK/B,GAFAH,EAAOE,MAAMC,UAAY,aAEJ,MAAjBH,EAAOI,MACK,IAAIC,MAChBC,SAAA,WAA6Bd,EAAOI,GAApC,UAEIW,OAGVnB,MACCE,GACH,OAAO,kBAAMkB,cAAcd,MAC1B,CAACJ,IAEJG,qBAAU,WACR,IAAK,IAAIG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMa,EAAQX,SAASC,uBAAuB,SAAS,GACjDF,EAAYC,SAASY,cAAc,OACnCC,EAASb,SAASY,cAAc,MACtCC,EAAOC,UAAYpB,EAAOI,GAE1BC,EAAUgB,UAAUC,IAAI,oBACxBH,EAAOE,UAAUC,IAAI,eAErBL,EAAMM,YAAYlB,GAElB,IAAK,IAAID,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMI,EAASF,SAASY,cAAc,UACtCV,EAAOI,MAAQ,IACfJ,EAAOgB,iBAAiB,SAAS,SAACC,GACT,MAAnBA,EAAEC,OAAOd,OACXa,EAAEC,OAAOd,MAAQ,IACjBa,EAAEC,OAAOhB,MAAMiB,gBAAkB,YAEjCF,EAAEC,OAAOd,MAAQ,IACjBa,EAAEC,OAAOhB,MAAMiB,gBAAkB,yBAGrCtB,EAAUkB,YAAYf,OAGzB,IAMH,OACE,yBAAKoB,UAAU,aACb,wBAAIA,UAAU,eAAd,kCACA,wBAAIC,MAAM,iBAAV,oDAGA,yBAAKD,UAAU,SACb,2BACEE,KAAK,QACLC,IAAI,MACJC,IAAI,OACJpB,MAAOd,EACP8B,UAAU,SACVK,SAjBa,SAACR,GACpB1B,EAAS0B,EAAEC,OAAOd,aCzDPsB,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2a8ea046.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Drumboxes = () => {\r\n  var count = 0;\r\n  const [speed, setSpeed] = useState(500);\r\n  const sounds = [\"clap\", \"hihat\", \"kick\", \"snare\", \"ride\", \"perc\", \"tom\"];\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (count + 1 > 8) {\r\n        count = 0;\r\n      }\r\n      for (let i = 0; i < 7; i++) {\r\n        const container = document.getElementsByClassName(\"button-container\")[\r\n          i\r\n        ];\r\n        const button = container.children[count];\r\n        if (count > 0) {\r\n          const prevbutton = container.children[count - 1];\r\n          prevbutton.style.transform = \"scale(1)\";\r\n        } else {\r\n          const prevbutton = container.children[7];\r\n          prevbutton.style.transform = \"scale(1)\";\r\n        }\r\n\r\n        button.style.transform = \"scale(1.1)\";\r\n\r\n        if (button.value === \"1\") {\r\n          const sound = new Audio(\r\n            process.env.PUBLIC_URL + `/${sounds[i]}0.wav`\r\n          );\r\n          sound.play();\r\n        }\r\n      }\r\n      count++;\r\n    }, speed);\r\n    return () => clearInterval(interval);\r\n  }, [speed]);\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < 7; i++) {\r\n      const drums = document.getElementsByClassName(\"drums\")[0];\r\n      const container = document.createElement(\"div\");\r\n      const header = document.createElement(\"h2\");\r\n      header.innerHTML = sounds[i];\r\n\r\n      container.classList.add(\"button-container\");\r\n      header.classList.add(\"description\");\r\n\r\n      drums.appendChild(container);\r\n\r\n      for (let i = 0; i < 8; i++) {\r\n        const button = document.createElement(\"button\");\r\n        button.value = \"0\";\r\n        button.addEventListener(\"click\", (e) => {\r\n          if (e.target.value === \"0\") {\r\n            e.target.value = \"1\";\r\n            e.target.style.backgroundColor = \"#a3bded\";\r\n          } else {\r\n            e.target.value = \"0\";\r\n            e.target.style.backgroundColor = \"rgb(228, 225, 225)\";\r\n          }\r\n        });\r\n        container.appendChild(button);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setSpeed(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"drum-page\">\r\n      <h2 className=\"main-header\">Tam's Music Maker &#127926;</h2>\r\n      <h4 class=\"second-header\">\r\n        Click any boxes below to start making your music\r\n      </h4>\r\n      <div className=\"drums\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"100\"\r\n          max=\"1500\"\r\n          value={speed}\r\n          className=\"slider\"\r\n          onChange={handleChange}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Drumboxes;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport DrumBoxes from \"./Drumboxes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DrumBoxes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}